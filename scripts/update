#!/bin/sh
set -e

# --- Helper Functions ---
log_step() { printf '\033[0;36m→ %s\033[0m\n' "$1"; }
log_done() { printf '\033[0;32m✔ %s\033[0m\n' "$1"; }
log_fail() { printf '\033[0;31m✘ %s\033[0m\n' "$1"; exit 1; }

# --- Argument Parsing ---
if [ "$#" -lt 1 ]; then
    log_fail "Usage: $0 <path_to_executable>"
fi

CURRENT_EXE=$1
shift 1

log_step "Checking for update..."

LATEST_RELEASE_INFO=$(curl -s "https://api.github.com/repos/PRASSamin/prasmoid/releases/latest")
[ -z "$LATEST_RELEASE_INFO" ] && log_fail "Failed to fetch release info from GitHub."

CURRENT_VERSION=$("$CURRENT_EXE" --version)
RAW_CURRENT_VERSION=$(echo "$CURRENT_VERSION" | sed "s/-portable//")
IS_PORTABLE=false
case "$CURRENT_VERSION" in
  *-portable*) IS_PORTABLE=true ;;
esac

ASSET_NAME="prasmoid"
$IS_PORTABLE && ASSET_NAME="prasmoid-portable"

# --- Extract download URLs ---
extract_url() {
    name=$1
    echo "$LATEST_RELEASE_INFO" | awk -v a="$name" '
        $0 ~ "\"name\": \""a"\"" {found=1}
        found && $0 ~ "\"browser_download_url\"" {
            gsub(/.*"browser_download_url": "|".*/, "", $0)
            print $0
            exit
        }
    '
}

extract_tag() {
    echo "$LATEST_RELEASE_INFO" | awk -F '"' '/"tag_name":/ {gsub(/^v/, "", $4); print $4; exit}'
}

SHA256_URL=$(extract_url "SHA256SUMS")
[ -z "$SHA256_URL" ] && log_fail "SHA256SUMS file missing in release."

log_step "Fetching SHA256SUMS..."
SHA256_CONTENT=$(curl -sL "$SHA256_URL")

LATEST_HASH=$(echo "$SHA256_CONTENT" | awk -v a="$ASSET_NAME" '$2 == a {print $1; exit}')
[ -z "$LATEST_HASH" ] && log_fail "Could not find hash for $ASSET_NAME in SHA256SUMS."

log_step "Calculating current binary hash..."
CURRENT_HASH=$(sha256sum "$CURRENT_EXE" | awk '{print $1}')

if [ "$CURRENT_HASH" = "$LATEST_HASH" ]; then
    log_done "You are already using the latest version of prasmoid ($RAW_CURRENT_VERSION.$LATEST_HASH)."
    exit 0
fi

log_step "New binary available. Downloading $ASSET_NAME..."
DOWNLOAD_URL=$(extract_url "$ASSET_NAME")
[ -z "$DOWNLOAD_URL" ] && log_fail "Download URL for $ASSET_NAME not found."

TEMP_FILE=$(mktemp)
curl -L -o "$TEMP_FILE" "$DOWNLOAD_URL" || {
    rm -f "$TEMP_FILE"
    log_fail "Download failed."
}

LATEST_VERSION=$(extract_tag)

log_step "Verifying downloaded binary hash..."
DOWNLOADED_HASH=$(sha256sum "$TEMP_FILE" | awk '{print $1}')

if [ "$DOWNLOADED_HASH" != "$LATEST_HASH" ]; then
    rm -f "$TEMP_FILE"
    log_fail "Checksum verification failed for downloaded binary."
fi

chmod +x "$TEMP_FILE"

# This script is executed by the Go binary, which already checks for root.
# So, we can assume we have the necessary permissions.

log_step "Replacing old binary..."
mv "$TEMP_FILE" "$CURRENT_EXE"

log_done "Update complete $LATEST_VERSION ($LATEST_HASH)"

exit 0
