#!/bin/sh
set -e

# --- Logging ---
log_step() { printf '\033[0;36m→ %s\033[0m\n' "$1"; }
log_done() { printf '\033[0;32m✔ %s\033[0m\n' "$1"; }
log_warn() { printf '\033[0;33m! %s\033[0m\n' "$1"; }
log_fail() { printf '\033[0;31m✘ %s\033[0m\n' "$1"; exit 1; }

# --- Detect Package Manager ---
detect_pkg_manager() {
    if command -v apt >/dev/null 2>&1; then
        echo "apt"
    elif command -v dnf >/dev/null 2>&1; then
        echo "dnf"
    elif command -v yum >/dev/null 2>&1; then
        echo "yum"
    elif command -v zypper >/dev/null 2>&1; then
        echo "zypper"
    elif command -v pacman >/dev/null 2>&1; then
        echo "pacman"
    elif command -v apk >/dev/null 2>&1; then
        echo "apk"
    elif command -v nix-env >/dev/null 2>&1; then
        echo "nix"
    else
        echo "null"
    fi
}

# --- Install Dependencies ---
install_deps() {
    pm=$1
    if [ "$pm" = "null" ]; then
        log_warn "Unsupported package manager detected. Automatic dependency installation is not supported."
        log_warn "Please install the required dependencies manually:"
        log_step "https://github.com/PRASSamin/prasmoid/blob/main/README.md#dependencies"
        log_warn "If you’d like to help extend the fix script for your package manager, please reach out."
        log_step "https://github.com/PRASSamin/prasmoid/issues"
        log_warn "Prasmoid will continue installing, but some features may not work until dependencies are installed."
        return
    fi

    log_step "Installing dependencies using $pm..."

    case "$pm" in
        apt)
            sudo apt install -y curl qt6-tools-dev plasma-sdk gettext
            ;;
        dnf|yum)
            sudo $pm install -y curl qmlformat plasma-sdk gettext
            ;;
        zypper|nix)
            log_warn "$pm detected. Automatic dependency installation is not supported."
            log_warn "Please install the required dependencies manually:"
            log_step "https://github.com/PRASSamin/prasmoid/blob/main/README.md#dependencies"
            log_warn "If you’d like to help extend the fix script for $pm, please reach out."
            log_step "https://github.com/PRASSamin/prasmoid/issues"
            log_warn "Prasmoid will continue installing, but some features may not work until dependencies are installed."
            return
            ;;
        pacman)
            sudo pacman -Sy --noconfirm curl qt6-declarative plasma-sdk gettext
            ln -sf /usr/lib/qt6/bin/qmlformat /usr/bin/qmlformat
            ;;
        apk)
            sudo apk add curl qt6-qttools-dev plasma-sdk gettext
            ln -sf /usr/lib/qt6/bin/qmlformat /usr/bin/qmlformat
            ;;
        *)
            log_warn "Unsupported package manager ($pm). Manual installation required."
            log_step "Dependencies info: https://github.com/PRASSamin/prasmoid/blob/main/README.md#dependencies"
            log_warn "If you’d like to help extend the fix script for $pm, please reach out."
            log_step "https://github.com/PRASSamin/prasmoid/issues"
            log_warn "Prasmoid will continue installing, but some features may not work until dependencies are installed."
            return
            ;;
    esac

    log_done "Dependencies installed"
}

# --- Main ---
install_deps "$(detect_pkg_manager)"


# --- Get GitHub release info ---
RELEASE_JSON=$(curl -s "https://api.github.com/repos/prassamin/prasmoid/releases/latest")

extract_url() {
    asset=$1
    echo "$RELEASE_JSON" | awk -v a="$asset" '
        $0 ~ "\"name\": \""a"\"" {found=1}
        found && $0 ~ "\"browser_download_url\"" {
            gsub(/.*"browser_download_url": "|".*/, "", $0)
            print $0
            exit
        }
    '
}

extract_size() {
    asset=$1
    echo "$RELEASE_JSON" | awk -v a="$asset" '
        $0 ~ "\"name\": \""a"\"" {found=1}
        found && $0 ~ "\"size\"" {
            gsub(/[^0-9]/, "", $0)
            print $0
            exit
        }
    '
}

NORMAL_URL=$(extract_url "prasmoid")
PORTABLE_URL=$(extract_url "prasmoid-portable")
SHA256_URL=$(extract_url "SHA256SUMS")
NORMAL_SIZE=$(extract_size "prasmoid")
PORTABLE_SIZE=$(extract_size "prasmoid-portable")

[ -z "$SHA256_URL" ] && log_fail "SHA256SUMS file missing in release assets."

# --- Select binary ---
if [ -t 0 ]; then
    echo "Please select which version to install:"
    echo "1) Prasmoid $(($NORMAL_SIZE / 1024 / 1024)) MB"
    echo "2) Prasmoid-portable $(($PORTABLE_SIZE / 1024 / 1024)) MB (Recommended for Alpine, NixOS, etc.)"
    printf "Enter choice (1 or 2): "
    read choice
else
    choice="${1:-1}"
fi

if [ "$choice" = "1" ]; then
    DOWNLOAD_URL="$NORMAL_URL"
    BINARY_NAME="prasmoid"
else
    DOWNLOAD_URL="$PORTABLE_URL"
    BINARY_NAME="prasmoid-portable"
fi

# --- Download ---
log_step "Downloading $BINARY_NAME..."
curl -L "$DOWNLOAD_URL" -o "$BINARY_NAME"

# --- Verify checksum ---
TMPDIR="${TMPDIR:-/tmp}"
TMPFILE=$(mktemp "$TMPDIR/prasmoid-XXXXXX")
curl -L "$SHA256_URL" -o "$TMPFILE"

EXPECTED_CHECKSUM=$(awk -v bin="$BINARY_NAME" '$2 == bin {print $1}' "$TMPFILE")
ACTUAL_CHECKSUM=$(sha256sum "$BINARY_NAME" | awk '{print $1}')

[ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ] && log_fail "Checksum failed! Expected: $EXPECTED_CHECKSUM, Got: $ACTUAL_CHECKSUM"
log_done "Checksum passed"

rm -f "$TMPFILE"
chmod +x "$BINARY_NAME"

# --- Install ---
if [ "$(id -u)" -ne 0 ]; then
    log_step "Installing to /usr/bin using sudo..."
    sudo cp "$BINARY_NAME" /usr/bin/prasmoid
else
    log_step "Installing to /usr/bin..."
    cp "$BINARY_NAME" /usr/bin/prasmoid
fi

rm "$BINARY_NAME"

[ ! -f "/usr/bin/prasmoid" ] && log_fail "Installation failed!"

log_done "$BINARY_NAME installed successfully!"

echo ""
echo "Run it anytime with: prasmoid"