#!/bin/bash

set -e

# --- Helper Functions ---
log_step() { echo -e "\033[0;36m→ $1\033[0m"; }
log_done() { echo -e "\033[0;32m✔ $1\033[0m"; }
log_fail() { echo -e "\033[0;31m✘ $1\033[0m"; exit 1; }

# --- Argument Parsing ---
if [ "$#" -lt 1 ]; then
    log_fail "Usage: $0 <path_to_executable>"
fi

CURRENT_EXE=$1
shift 1

log_step "Checking for update..."

LATEST_RELEASE_INFO=$(curl -s "https://api.github.com/repos/PRASSamin/prasmoid/releases/latest")
if [ -z "$LATEST_RELEASE_INFO" ]; then
    log_fail "Failed to fetch release info from GitHub."
fi

CURRENT_VERSION=$("$CURRENT_EXE" version)
RAW_CURRENT_VERSION=$(echo "$CURRENT_VERSION" | sed "s/-portable//")
IS_PORTABLE=false
if [[ "$CURRENT_VERSION" == *"-portable"* ]]; then
    IS_PORTABLE=true
fi

ASSET_NAME="prasmoid"
if $IS_PORTABLE; then
    ASSET_NAME="prasmoid-portable"
fi

SHA256_URL=$(echo "$LATEST_RELEASE_INFO" | jq -r '.assets[] | select(.name == "SHA256SUMS") | .browser_download_url')
if [[ -z "$SHA256_URL" ]]; then
  log_fail "SHA256SUMS file missing in release. This is likely a problem with the release itself, not your setup. Please check the release page on GitHub for updates, or contact the maintainers (open an issue at https://github.com/PRASSamin/prasmoid/issues) for assistance."
fi

log_step "Fetching SHA256SUMS..."

SHA256_CONTENT=$(curl -sL "$SHA256_URL")
LATEST_HASH=$(echo "$SHA256_CONTENT" | grep " $ASSET_NAME$" | awk '{print $1}')
if [[ -z "$LATEST_HASH" ]]; then
  log_fail "Could not find hash for $ASSET_NAME in SHA256SUMS."
fi

log_step "Calculating current binary hash..."
CURRENT_HASH=$(sha256sum "$CURRENT_EXE" | awk '{print $1}')

if [ "$CURRENT_HASH" == "$LATEST_HASH" ]; then
    log_done "You are already using the latest version of Prasmoid ($RAW_CURRENT_VERSION.$LATEST_HASH)."
    exit 0
fi

log_step "New binary available. Downloading $ASSET_NAME..."

DOWNLOAD_URL=$(echo "$LATEST_RELEASE_INFO" | jq -r ".assets[] | select(.name == \"$ASSET_NAME\") | .browser_download_url")
if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
    log_fail "Download URL for $ASSET_NAME not found."
fi

TEMP_FILE=$(mktemp)
curl -L -o "$TEMP_FILE" "$DOWNLOAD_URL"
if [ $? -ne 0 ]; then
    rm -f "$TEMP_FILE"
    log_fail "Download failed."
fi

LATEST_VERSION=$(echo "$LATEST_RELEASE_INFO" | jq -r ".tag_name" | sed "s/^v//")

log_step "Verifying downloaded binary hash..."
DOWNLOADED_HASH=$(sha256sum "$TEMP_FILE" | awk '{print $1}')

if [ "$DOWNLOADED_HASH" != "$LATEST_HASH" ]; then
    rm -f "$TEMP_FILE"
    log_fail "Checksum verification failed for downloaded binary."
fi

chmod +x "$TEMP_FILE"

# This script is executed by the Go binary, which already checks for root.
# So, we can assume we have the necessary permissions.

log_step "Replacing old binary..."
mv "$TEMP_FILE" "$CURRENT_EXE"

log_done "Update complete $LATEST_VERSION ($LATEST_HASH)"

log_step "Relaunching CLI..."
exec "$CURRENT_EXE"

exit 0
